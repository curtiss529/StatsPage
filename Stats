<!DOCTYPE html>
<html>
<head>
   <title>Pathfinding Algorithm Visualizer</title>
   <meta name="viewport" content="width=device-width, initial-scale=1">
<style>
div {
   border: dotted 1pt black;
   padding: 0px;
   margin: 90px 20px;
}
body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
}
tr{
    background-color: rgb(121, 224, 231);
    font:bold;
    font-size:14px;
}
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}
li {
  float: left;
}
li a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}
li a:hover {
  background-color: #111;
}
#footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 2.5rem;            /* Footer height */
}
button{
  padding: 20px 20px;
}
</style>
<meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
</head>
<script type="text/javascript">
  var TableBackgroundNormalColor = "rgb(121, 224, 231)";
  var TableBackgroundMouseoverColor = "rgb(250, 128, 128)";
  function ChangeBackgroundColor(row) { row.style.backgroundColor = TableBackgroundMouseoverColor; }
  function RestoreBackgroundColor(row) { row.style.backgroundColor = TableBackgroundNormalColor; }
  </script>  
<body style="background-image:url('images/Grid.jpg');">
<h1>
Algorithms
</h1>
<ul>
  <li><a class="active" href="#home">Home</a></li>
  <li><a href="#news">Algorithms</a></li>
  <li><a href="#contact">Grids</a></li>
  <li><a href="">Statistics</a></li>
</ul>
<div class="container" style="border-style: solid; background-color:rgb(250, 128, 128);">
    <h2>Pathfinding Algorithms</h2>            
    <table class="table table-hover">
      <tr onmouseover="ChangeBackgroundColor(this)" onmouseout="RestoreBackgroundColor(this)">
          <td style="font-size: x-large; font: bolder;">A* Algorithm</td>
            <td><canvas id="myChart1" style="width:100%;max-width:700px"></canvas>

              <script>
              var xyValues = [
                {x:50, y:7},
                {x:60, y:8},
                {x:70, y:8},
                {x:80, y:9},
                {x:90, y:9},
                {x:100, y:9},
                {x:110, y:10},
                {x:120, y:11},
                {x:130, y:14},
                {x:140, y:14},
                {x:150, y:15}
              ];
              
              new Chart("myChart1", {
                type: "scatter",
                data: {
                  datasets: [{
                    pointRadius: 4,
                    pointBackgroundColor: "rgb(0,0,255)",
                    data: xyValues
                  }]
                },
                options: {
                  legend: {display: false},
                  scales: {
                    xAxes: [{ticks: {min: 40, max:160}}],
                    yAxes: [{ticks: {min: 6, max:16}}],
                  }
                }
              });
              </script><br>The shortest path in any situation after checking all values and finding the smallest amount per vertex.
                <br>1. f(n)=g(n)+h(n)
                <br>2. Where g(n) is the sum of all the nodes that have been touch since the start.
                <br>3. h(n) is the heuristic value that is the estimated value of the entire travel. </td>
            </tr>
            
        <tr  onmouseover="ChangeBackgroundColor(this)" onmouseout="RestoreBackgroundColor(this)">
          <td  style="font-size: x-large; font: bolder;">Dijkstra's Algorithm</td>
          <td> <canvas id="myChart2" style="width:100%;max-width:600px"></canvas>

            <script>
            var xValues = [];
            var yValues = [];
            generateData("Math.sin(x)", 0, 10, 0.5);
            
            new Chart("myChart2", {
              type: "line",
              data: {
                labels: xValues,
                datasets: [{
                  fill: false,
                  pointRadius: 2,
                  borderColor: "rgba(0,0,255,0.5)",
                  data: yValues
                }]
              },    
              options: {
                legend: {display: false},
                title: {
                  display: true,
                  text: "y = x * 2 + 7",
                  fontSize: 16
                }
              }
            });
            function generateData(value, i1, i2, step = 1) {
              for (let x = i1; x <= i2; x += step) {
                yValues.push(eval(value));
                xValues.push(x);
              }
            }
            </script>
            <br>Find the shortest path between nodes in a graph                                                                            
            <br> 1. Create your set to prepare your output
            <br>2. Assign a distance for each vertice in the graph
            <br>3. While the created set doesn’t have all the vertices the lowest value for each will be scanned and added to the set
             </td>
          </tr>
        <tr  onmouseover="ChangeBackgroundColor(this)" onmouseout="RestoreBackgroundColor(this)">
            <td  style="font-size: x-large; font: bolder;">Depth First Algorithm</td>
            <td><canvas id="myChart3" style="width:100%;max-width:600px"></canvas>

              <script>
              var xValues = ["Italy", "France", "Spain", "USA", "Argentina"];
              var yValues = [55, 49, 44, 24, 15];
              var barColors = ["red", "green","blue","orange","brown"];
              
              new Chart("myChart3", {
                type: "bar",
                data: {
                  labels: xValues,
                  datasets: [{
                    backgroundColor: barColors,
                    data: yValues
                  }]
                },
                options: {
                  legend: {display: false},
                  title: {
                    display: true,
                    text: "World Wine Production 2018"
                  }
                }
              });
              </script>
              <br>Known as depth first because it searches for the deepest node first.
              Uses a stack to remember to get to the next vertex.
              Goes through every vertex and must backtrack
              <br>1. Go to adjacent unvisited vertex, mark it as visited and push it into the stack.
              <br>2. If none are found, pop up a vertex.
              <br>3. Repeat 1 and 2 until the stack’s empty. 
              </td>  
          </tr>
        <tr  onmouseover="ChangeBackgroundColor(this)" onmouseout="RestoreBackgroundColor(this)">
           <td  style="font-size: x-large; font: bolder;">Breadth First Algorithm</td>
            <td><canvas id="myChart4" style="width:100%;max-width:600px"></canvas>

              <script>
              var xValues = ["Italy", "France", "Spain", "USA", "Argentina"];
              var yValues = [55, 49, 44, 24, 15];
              var barColors = [
                "#b91d47",
                "#00aba9",
                "#2b5797",
                "#e8c3b9",
                "#1e7145"
              ];
              
              new Chart("myChart4", {
                type: "pie",
                data: {
                  labels: xValues,
                  datasets: [{
                    backgroundColor: barColors,
                    data: yValues
                  }]
                },
                options: {
                  title: {
                    display: true,
                    text: "World Wide Wine Production 2018"
                  }
                }
              });
              </script>
              <br>Queue used to remember to search the next vertex and when a dead end occurs a new search is done again.
              <br>1. Go to adjacent unvisited vertex, mark it as visited and insert into the queue.
              <br>2. If none are found, remove the first vertex.
              <br>3. Repeat 1 and 2 until the queue is empty.</td>
          </tr>
      </tbody>
    </table>
</div>
</body>
<footer style="background-color:black;">
    <p style="color:white">By Curtiss Stacey, Gerardo Rodriguez, and Kristine Veneles  
    </p>
  </footer>
</html
